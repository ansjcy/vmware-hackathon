#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

var data_process = require('../controller/collision');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Create Socket.Io.
 */
var io = require('socket.io')(server,{
    serveClient: false
});
var client_id = -1;

io.on('connection', function(socket){
    client_id++;
    // console.log(socket.id);
    socket.emit('news', {id:socket.id,team:client_id % 2});
    data_process.on_receive({id:socket.id, direction_key_press:[false,false,false,false,false,false], team:client_id % 2});
    /**
     * broadcast to all user other than the new client
     */
    //socket.broadcast.emit('newClientConnect', `New ${client_id} clients connects`);

    /**
     * Listen to client event
     */
    socket.on('update',function (data) {
      data_process.on_receive(data['tank_data']);
    });
    socket.on('disconnect',(reason)=>{
      data_process.on_leave(socket.id);
    });
});

setInterval(()=>{var tmp = data_process.on_send(); io.sockets.emit('push', tmp);
},16)

// setTimeout(()=>{
//     io.sockets.emit("push",{
//         "task_positions":[],
//         "bullect_positions":[],
//         "hp":[]
//     });
// },3000);